import locale
import re
from datetime import datetime
import sqlite3

from telebot import TeleBot, types
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

from database import (add_log, get_daily_report, delete_record_by_id,
                      infer_year, format_report, send_report_internal,
                      get_unique_employees, get_nearest_date, get_logs)
from TOKEN import TOKEN

DB_NAME = 'bd_nikos.sql'
bot = TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.reply_to(message, f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def add_record(message):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î + –∫–Ω–æ–ø–∫–∏
    """

    lines = message.text.strip().split('\n')
    if len(lines) < 3:
        bot.reply_to(message, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 3—Ö —Å—Ç—Ä–æ–∫: '
                              '–¥–∞—Ç–∞/–≤—Ä–µ–º—è(—Ñ–æ—Ä–º–∞—Ç –î–î–ú–ú –ß–ß–ú–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ß–ß–ú–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π), '
                              '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –ø—Ä–æ–µ–∫—Ç')
        return

    try:
        date_time_str = lines[0].strip()
        employees = lines[1].strip().lower().split()
        project = lines[2].strip()

        match = re.match(r'(\d{4,6})? ?(\d{4})(?: (.+))?', date_time_str)
        if not match:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏. '
                                  '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–î–î–ú–ú –ß–ß–ú–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" –∏–ª–∏ "–ß–ß–ú–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"')
            return

        date_part = match.group(1) if match.group(1) else datetime.now().strftime('%d%m')
        time_part = match.group(2)
        comment = match.group(3).strip() if match.group(3) else ''

        date_with_year = get_nearest_date(date_part)
        full_date_time = datetime.strptime(f'{date_with_year.strftime("%d%m%Y")} {time_part}', "%d%m%Y %H%M")
        time_stamp = full_date_time.strftime('%Y-%m-%d %H:%M:%S')

        for employee in employees:
            record_id = add_log(employee, project, time_stamp, comment)
            report_emp = send_report_internal(employee, date_part)

            keyboard = types.InlineKeyboardMarkup()
            delete_button = types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{record_id}')
            edit_button = types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f'edit_{record_id}')
            keyboard.add(delete_button, edit_button)

            bot.reply_to(message, f'–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: '
                                  f'ID: {record_id}'
                                  f'\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee}'
                                  f'\n–ü—Ä–æ–µ–∫—Ç: {project}'
                                  f'\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {time_stamp}'
                                  f'\n\n{report_emp}',
                                  reply_markup=keyboard)

    except ValueError as ve:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏: {ve}')
    except Exception as exc:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞: {exc}')

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_record_callback(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ ID
    """
    record_id = int(call.data.split('_')[1])

    try:
        if delete_record_by_id(record_id):
            bot.answer_callback_query(call.id, text=f'–ó–∞–ø–∏—Å—å —Å ID={record_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')
            bot.edit_message_text(f'–ó–∞–ø–∏—Å—å —Å ID={record_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
                                  call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, text=f'–ó–∞–ø–∏—Å—å —Å ID={record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

    except Exception as exc:
        bot.answer_callback_query(call.id, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc}')

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def callback_edit(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ ID

    """
    record_id = int(call.data.split('_')[1])

    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT employee, project, time_stamp, comment FROM user WHERE id = ?", (record_id,))
        record = cursor.fetchone()

    if record:
        employee, project, time_stamp, comment = record

        date_part = time_stamp[8:10] + time_stamp[5:7]
        time_part = time_stamp[11:16].replace(":", "")
        original_message = f"{date_part} {time_part} {comment}\n{employee}\n{project}"

        bot.send_message(
            call.message.chat.id,
            f"‚úèÔ∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:\n\n```{original_message}```",
            parse_mode="Markdown")
        delete_record_by_id(record_id)

    else:
        bot.answer_callback_query(call.id, '‚ùå –û—à–∏–±–∫–∞: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

@bot.message_handler(commands=['get'])
def get_records_by_date(message):
    """
    processes the /get command and returns a list of
    records from the database for the specified date.
    """

    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /get <–î–î–ú–ú–ì–ì>')
            return

        date_str = args[1].strip()
        try:
            query_date = datetime.strptime(date_str, '%d%m%y').strftime('%Y-%m-%d')
        except ValueError:
            bot.reply_to(message, '–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–î–ú–ú–ì–ì')
            return

        records = get_daily_report(None, query_date)

        if not records:
            bot.reply_to(message, f'–ó–∞–ø–∏—Å–∏ –∑–∞ {query_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            return

        report = f'–ó–∞–ø–∏—Å–∏ –∑–∞ {date_str[:2]}.{date_str[2:4]}.{date_str[4:6]}:\n\n'
        for record in records:
            r_id, time_stamp, employee, project, comment = record
            report += (
                f'ID: {r_id}\n'
                f'–í—Ä–µ–º—è: {time_stamp}\n'
                f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee}\n'
                f'–ü—Ä–æ–µ–∫—Ç: {project}\n'
                f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n'
            )

        MAX_MESSAGE_LENGTH = 4095
        if len(report) > MAX_MESSAGE_LENGTH:
            parts = [report[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(report), MAX_MESSAGE_LENGTH)]
            for part in parts:
                bot.reply_to(message, part)
        else:
            bot.reply_to(message, report)

    except Exception as exc:
        bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc}')

@bot.message_handler(commands=['report'])
def send_report(message):
    """
    –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–ø–æ—Ä—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è
    —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:
    /report –î–î–ú–ú(–ì–ì) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    /report —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    """
    try:
        args = message.text.split()

        if len(args) < 2:
            bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: /report <—Å–æ—Ç—Ä—É–¥–Ω–∏–∫> <–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú(–ì–ì)>'
                                  '–ª–∏–±–æ /report —Å–æ—Ç—Ä—É–¥–Ω–∏–∫')
            return

        if args[-1].isdigit():
            date_input = args[-1]
            if len(date_input) == 6:
                full_date = datetime.strptime(date_input, '%d%m%y')
            elif len(date_input) == 4:
                current_year = datetime.now().strftime('%y')
                full_date = datetime.strptime(date_input + current_year, '%d%m%y')
            else:
                bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î–ú–ú–ì–ì –∏–ª–∏ –î–î–ú–ú')
                return

            employee = ' '.join(args[1:-1]).strip().lower()
        else:
            full_date = datetime.now()
            employee = ' '.join(args[1:]).strip().lower()

        if not employee:
            bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
            return

        report_date_str = full_date.strftime('%Y-%m-%d')

        logs = get_daily_report(employee, report_date_str)
        if not logs:
            bot.reply_to(message, f'–ó–∞–ø–∏—Å–µ–π –∑–∞ {report_date_str} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ "{employee}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return

        report = format_report(logs, employee, full_date)

        MAX_MESSAGE_LENGTH = 4096
        if len(report) > MAX_MESSAGE_LENGTH:
            for chunk in [report[i:i + MAX_MESSAGE_LENGTH] for i
                          in range(0, len(report), MAX_MESSAGE_LENGTH)
                          ]:
                bot.reply_to(message, chunk)
        else:
            bot.reply_to(message, report)

    except ValueError as ve:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã: {ve}')
    except Exception as exc:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {exc}')
        print(f'Exception occurred: {exc}')

@bot.message_handler(commands=['reportAll'])
def report_all(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reportAll –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –¥–µ–Ω—å –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
    –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å, —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç–µ.
    """
    try:
        args = message.text.split()

        if len(args) < 2:
            date_input = datetime.now().strftime('%d%m')
        else:
            date_input = args[1].strip()

        try:
            report_date = get_nearest_date(date_input)
        except ValueError:
            bot.reply_to(message, '–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–î–ú–ú')
            return

        report_date_str = report_date.strftime('%Y-%m-%d')

        employees = get_unique_employees()
        if not employees:
            bot.reply_to(message, '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç')
            return

        report = f'–û—Ç—á–µ—Ç –∑–∞ {report_date.strftime("%d.%m.%y")}:\n\n'

        for employee in employees:
            logs = get_daily_report(employee, report_date_str)
            if not logs:
                report += (f'<b>üî¥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "{employee}":</b> –ù–µ —Ä–∞–±–æ—Ç–∞–ª\n'
                           f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n')
                continue

            employee_report = format_report(logs, employee, report_date)
            report += (f'<b>üî¥ {employee_report}</b>\n'
                       f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n')

        MAX_MESSAGE_LENGTH = 4095
        if len(report) > MAX_MESSAGE_LENGTH:
            for chunk in [report[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(report), MAX_MESSAGE_LENGTH)]:
                bot.reply_to(message, chunk)
        else:
            bot.reply_to(message, report, parse_mode='HTML')

    except Exception as exc:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞: {exc}')

@bot.message_handler(commands=['periodAll'])
def send_period_all(message):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏–∑ –±–∞–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /periodAll <–ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–µ –î–î–ú–ú-–î–î–ú–ú>')
            return

        period = args[1].strip()
        print(period)

        if '-' not in period or len(period) != 9:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. '
                                  '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î–ú–ú-–î–î–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0101-0203)')
            return

        start_period, end_period = period.split('-')
        print(f"start_period: {start_period}, end_period: {end_period}")

        if len(start_period) != 4 or len(end_period) != 4:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. '
                                  '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î–ú–ú-–î–î–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0101-0203)')
            return


        try:
            start_date = get_nearest_date(start_period)
            end_date = get_nearest_date(end_period)
            print(f"start_date: {start_date}, end_date: {end_date}")

            if end_date < start_date:
                bot.reply_to(message, '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.')
                return
        except ValueError as e:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ. {str(e)}')
            return

        employees = get_unique_employees()
        if not employees:
            bot.reply_to(message, '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç')
            return

        report = (f'–û—Ç—á–µ—Ç—ã –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime("%d.%m.%y")} '
                  f'–ø–æ {end_date.strftime("%d.%m.%y")}:\n\n')
        print(report)

        for employee in employees:
            logs = get_logs(employee, start_date.strftime('%Y-%m-%d 00:00:00'),
                            end_date.strftime('%Y-%m-%d 23:59:59'))
            print(f"logs for {employee}: {logs}")

            if not logs:
                report += f'<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ "{employee}"</b>: –ù–µ —Ä–∞–±–æ—Ç–∞–ª\n\n'
                continue

            daily_totals = {}
            total_minutes = 0

            for i in range(len(logs)):
                if len(logs[i]) < 5:
                    continue

                if isinstance(logs[i][1], str):
                    try:
                        logs[i] = (
                            logs[i][0],
                            datetime.strptime(logs[i][1], '%Y-%m-%d %H:%M:%S'),
                            logs[i][2], logs[i][3],
                            logs[i][4]
                        )
                    except ValueError:
                        continue

                current_date = logs[i][1].date()
                start_time = logs[i][1]

                if i + 1 < len(logs):
                    end_time = logs[i + 1][1]
                else:
                    end_time = start_time

                duration = int((end_time - start_time).total_seconds() // 60)

                if logs[i][3].lower() not in ['—Å—Ç–æ–ø', '—É—à–µ–ª']:
                    total_minutes += duration
                    if current_date not in daily_totals:
                        daily_totals[current_date] = 0
                    daily_totals[current_date] += duration

            report += f'<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ "{employee}":</b>\n'
            report += f'–ò—Ç–æ–≥–æ: {round(total_minutes / 60, 3)} —á ({total_minutes} –º–∏–Ω):\n\n'

            for date, minutes in sorted(daily_totals.items()):
                hours = round(minutes / 60, 3)
                report += f'<i>{date.strftime("%d.%m.%y")}: {hours} —á ({minutes} –º–∏–Ω)</i>\n'
            report += '\n'

        MAX_MESSAGE_LENGTH = 4095
        if len(report) > MAX_MESSAGE_LENGTH:
            for chunk in [report[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(report), MAX_MESSAGE_LENGTH)]:
                bot.reply_to(message, chunk)
        else:
            bot.reply_to(message, report, parse_mode='HTML')

    except Exception as exc:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {exc}')

@bot.message_handler(commands=['period'])
def send_period_summary(message):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.
    """
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /period <—Å–æ—Ç—Ä—É–¥–Ω–∏–∫> <–ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú –∏–ª–∏ –î–î–ú–ú-–î–î–ú–ú>')
            return

        employee = args[1].strip().lower()
        period = args[2].strip()

        current_year = datetime.now().year

        try:
            if '-' in period:
                start_period, end_period = period.split('-')
                start_day = int(start_period[:2])
                start_month = int(start_period[2:])
                end_day = int(end_period[:2])
                end_month = int(end_period[2:])

                start_date = datetime(current_year, start_month, start_day)
                end_date = datetime(current_year, end_month, end_day, 23, 59, 59)  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª—ã–π –¥–µ–Ω—å
            else:
                day = int(period[:2])
                month = int(period[2:])
                start_date = datetime(current_year, month, day)
                end_date = datetime(current_year, month, day, 23, 59, 59)

        except ValueError:
            bot.reply_to(message, '–ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú –∏–ª–∏ –î–î–ú–ú-–î–î–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1708 –∏–ª–∏ 1708-2608)')
            return

        if '-' in period or employee != "–≤—Å–µ":
            logs = get_logs(employee, start_date.strftime('%Y-%m-%d %H:%M:%S'), end_date.strftime('%Y-%m-%d %H:%M:%S'))
        else:
            logs = get_logs(None, start_date.strftime('%Y-%m-%d %H:%M:%S'), end_date.strftime('%Y-%m-%d %H:%M:%S'))

        if not logs:
            bot.reply_to(message, f'–ó–∞–ø–∏—Å–µ–π –∑–∞ {start_date.strftime("%d.%m.%y")} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            return

        daily_totals = {}
        total_minutes = 0
        employee_logs = {}

        for log in logs:
            log_employee = log[2].lower()
            if log_employee not in employee_logs:
                employee_logs[log_employee] = []
            employee_logs[log_employee].append(log)

        if '-' in period or employee != "–≤—Å–µ":
            for i in range(len(logs) - 1):
                current_date = logs[i][1].date()
                next_date = logs[i + 1][1].date()

                if current_date != next_date:
                    continue

                start_time = logs[i][1]
                end_time = logs[i + 1][1]

                if end_time > end_date:
                    end_time = end_date

                duration = int((end_time - start_time).total_seconds() // 60)

                if logs[i][3].lower() not in ['—Å—Ç–æ–ø', '—É—à–µ–ª']:
                    total_minutes += duration
                    if current_date not in daily_totals:
                        daily_totals[current_date] = 0
                    daily_totals[current_date] += duration

            report = (f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã "{employee}" –∑–∞ –ø–µ—Ä–∏–æ–¥ '
                      f'—Å {start_date.strftime("%d.%m.%y")} '
                      f'–ø–æ {end_date.strftime("%d.%m.%y")}:\n\n')
            report += f'–ò—Ç–æ–≥–æ: {round(total_minutes / 60, 3)} —á ({total_minutes} –º–∏–Ω):\n\n'

            for date, minutes in sorted(daily_totals.items()):
                hours = round(minutes / 60, 3)
                report += f'{date.strftime("%d.%m.%y")}: –í—Å–µ–≥–æ: {hours} —á ({minutes} –º–∏–Ω)\n'

            bot.reply_to(message, report)

        else:
            reports = []
            for emp, emp_logs in employee_logs.items():
                daily_totals = {}
                total_minutes = 0

                for i in range(len(emp_logs) - 1):
                    current_date = emp_logs[i][1].date()
                    next_date = emp_logs[i + 1][1].date()

                    if current_date != next_date:
                        continue

                    start_time = emp_logs[i][1]
                    end_time = emp_logs[i + 1][1]

                    duration = int((end_time - start_time).total_seconds() // 60)

                    if emp_logs[i][3].lower() not in ['—Å—Ç–æ–ø', '—É—à–µ–ª']:
                        total_minutes += duration
                        if current_date not in daily_totals:
                            daily_totals[current_date] = 0
                        daily_totals[current_date] += duration

                report = f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã "{emp}" –∑–∞ {start_date.strftime("%d.%m.%y")}:\n'
                report += f'–ò—Ç–æ–≥–æ: {round(total_minutes / 60, 3)} —á ({total_minutes} –º–∏–Ω):\n\n'

                for date, minutes in sorted(daily_totals.items()):
                    hours = round(minutes / 60, 3)
                    report += f'{date.strftime("%d.%m.%y")}: –í—Å–µ–≥–æ: {hours} —á ({minutes} –º–∏–Ω)\n'

                reports.append(report)

            for rep in reports:
                bot.reply_to(message, rep)

    except Exception as exc:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {exc}')

@bot.message_handler(commands=['projectsPeriod'])
def project_period(message):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –î–î–ú–ú-–î–î–ú–ú –∏–ª–∏ –î–î–ú–ú.
    """
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú-–î–î–ú–ú –∏–ª–∏ –î–î–ú–ú.")
            return

        period = args[1]
        current_date = datetime.now()
        dates = period.split('-')

        if len(dates) == 2:
            start_date = infer_year(dates[0], current_date).strftime('%Y-%m-%d')
            end_date = infer_year(dates[1], current_date).strftime('%Y-%m-%d')
        else:
            start_date = end_date = infer_year(dates[0], current_date).strftime('%Y-%m-%d')

        title = f'–ü—Ä–æ–µ–∫—Ç—ã —Å {start_date} –ø–æ {end_date}:\n' if start_date != end_date else f'–ü—Ä–æ–µ–∫—Ç—ã –∑–∞ {start_date}:\n'

        logs = get_logs(None, f"{start_date} 00:00:00", f"{end_date} 23:59:59")
        if not logs:
            bot.reply_to(message, "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        projects = {}
        logs.sort(key=lambda x: x[1])

        for i in range(len(logs) - 1):
            log_id, time_stamp, employee, project, comment = logs[i]

            if not project or project.lower() in ["—Å—Ç–æ–ø", "—É—à–µ–ª"]:
                continue

            project_key = project[0].lower() + project[1:]

            if project_key not in projects:
                projects[project_key] = {'employees': {}, 'total_minutes': 0}
            if employee not in projects[project_key]['employees']:
                projects[project_key]['employees'][employee] = 0

            next_time = None
            for j in range(i + 1, len(logs)):
                if logs[j][2] == employee:
                    next_time = logs[j][1]
                    break

            if not next_time or next_time.date() != time_stamp.date():
                continue

            duration = int((next_time - time_stamp).total_seconds() // 60)
            projects[project_key]['employees'][employee] += duration
            projects[project_key]['total_minutes'] += duration

        report = title
        sorted_projects = sorted(projects.items(), key=lambda x: x[1]['total_minutes'], reverse=True)

        for project, data in sorted_projects:
            total_hours = round(data['total_minutes'] / 60, 1)
            report += f'\nüî¥ –ü—Ä–æ–µ–∫—Ç "{project}" \n(–≤—Å–µ–≥–æ: {data["total_minutes"]} –º–∏–Ω / {total_hours} —á):\n\n'
            for employee, minutes in data['employees'].items():
                hours = round(minutes / 60, 1)
                report += f'- {employee}: {minutes} –º–∏–Ω ({hours} —á)\n'

        MAX_MESSAGE_LENGTH = 4095
        if len(report) > MAX_MESSAGE_LENGTH:
            parts = [report[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(report), MAX_MESSAGE_LENGTH)]
            for part in parts:
                bot.reply_to(message, part)
        else:
            bot.reply_to(message, report.strip())

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

@bot.message_handler(commands=['delete'])
def delete_record(message):
    """
    deletes an entry from the DB by the specified ID
    """
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <ID –∑–∞–ø–∏—Å–∏>')
        return

    try:
        record_id = int(args[1])
        if delete_record_by_id(record_id):
            bot.reply_to(message, f'–ó–∞–ø–∏—Å—å —Å ID={record_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')
        else:
            bot.reply_to(message, f'–ó–∞–ø–∏—Å—å —Å ID = {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    except ValueError:
        bot.reply_to(message, f'ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
    except Exception as exc:
        bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc}')

@bot.message_handler(commands=['help'])
def help_command(message):
    """
    commands with a description
    """

    commands = """
    
    /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    /help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    
    /report <—Å–æ—Ç—Ä—É–¥–Ω–∏–∫> <–î–î–ú–ú(–ì–ì)> - –û—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å. 
    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    
    /reportAll <–î–î–ú–ú> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞.
    
    /get <–î–î–ú–ú–ì–ì> - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å —Å ID.
    
    /period <—Å–æ—Ç—Ä—É–¥–Ω–∏–∫> <–î–î–ú–ú-–î–î–ú–ú | –î–î–ú–ú> - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã 
    —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    
    /periodAll <–î–î–ú–ú-–î–î–ú–ú> - 
        1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥ (–î–î–ú–ú-–î–î–ú–ú), –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
    /projectsPeriod –î–î–ú–ú-–î–î–ú–ú | –î–î–ú–ú - –æ—Ç—á–µ—Ç –æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
    
    /delete <ID> - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID.
    
    /add <—Å–æ—Ç—Ä—É–¥–Ω–∏–∫> <–ø—Ä–æ–µ–∫—Ç> <–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    
    1 —Å—Ç—Ä–æ–∫–∞: –î–∞—Ç–∞ (–æ–ø—Ü), –≤—Ä–µ–º—è (–æ–±—è–∑), –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü). –§–æ—Ä–º–∞—Ç: –î–î–ú–ú–ì–ì –ß–ß–ú–ú —Ç–µ–∫—Å—Ç.  
    2 —Å—Ç—Ä–æ–∫–∞: –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.  
    3 —Å—Ç—Ä–æ–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    bot.reply_to(message, commands)
